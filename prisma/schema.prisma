// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Websites table
model Website {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  description String?
  logo_url    String?  @db.VarChar(500)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(6)

  // Relations
  screenshots     Screenshot[]
  system_prompts  SystemPrompt[]

  @@map("websites")
}

// Screenshots table
model Screenshot {
  id             String   @id @default(uuid()) @db.Uuid
  website_id     String   @db.Uuid
  filename       String   @db.VarChar(255)
  s3_key         String   @db.VarChar(500)
  s3_bucket      String   @db.VarChar(100)
  file_size_bytes Int?
  width          Int?
  height         Int?
  description    String?
  annotation     String?
  sort_order     Int      @default(0)
  is_default     Boolean  @default(false)
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @updatedAt @db.Timestamp(6)

  // Relations
  website Website @relation(fields: [website_id], references: [id], onDelete: Cascade)

  // Compound unique constraint for website_id + filename
  @@unique([website_id, filename], name: "website_id_filename")

  @@map("screenshots")
}

// System prompts table
model SystemPrompt {
  id             String   @id @default(uuid()) @db.Uuid
  website_id     String   @db.Uuid
  name           String   @db.VarChar(200)
  description    String?
  s3_key         String   @db.VarChar(500)
  s3_bucket      String   @db.VarChar(100)
  file_size_bytes Int?
  is_active      Boolean  @default(false)
  version        Int      @default(1)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @updatedAt @db.Timestamp(6)

  // Relations
  website Website @relation(fields: [website_id], references: [id], onDelete: Cascade)

  // Compound unique constraint for website_id + name
  @@unique([website_id, name], name: "website_id_name")

  @@map("system_prompts")
}

// Agent sessions table (for analytics)
model AgentSession {
  id                String   @id @default(uuid()) @db.Uuid
  website_id        String   @db.Uuid
  session_url       String   @db.VarChar(500)
  user_agent        String?
  ip_address        String?  @db.Inet
  started_at        DateTime @default(now()) @db.Timestamp(6)
  ended_at          DateTime? @db.Timestamp(6)
  duration_seconds  Int?

  @@map("agent_sessions")
}
